Comandos Docker:
   Flag '--help': Todo comando no docker tem acesso a essa flag. Lista as opções disponíveis para o comando
      Ex.: docker run --help
   
   'docker run <nome_image>': usado para executar uma imagem em um novo container:
      Flags:
         -it: usado para habilitar o terminal de interação, permitindo interagir com o container que está executando a imagem
            Ex.: docker run -it python
	 -d: usado para executar um container em background
	    Ex.: docker run -d -p 80:80 nginx
	 -p: expõe uma porta para acessar o container
	    Ex.: docker run -d nginx
	 --name: Define um noma para um novo container
	    Ex.: docker run --name container_python python
	 --rm: usado para remover o container após finalizar a execução
	    Ex.: docker run --rm <container>
	 
   'docker stop <'container id' ou 'nome'>': Encerra a execução de um container:
      Flags:
         -
         
   'docker ps' ou 'docker container ls': exibe quais containers estão sendo executados no momento:
      Flags:
         -a: usando para exibir containers já executados na máquina
            Ex.: docker ps -a
            
   'docker start <id>': Iniciar um container parado
      Flags:
         -i: usado para habilitar o terminal de interação, permitindo interagir com o container que está executando a imagem
            Ex.: docker start -i <container>
         
   'docker logs <id>': usado para exibir os logs de determinada execução
      Flags:
      	-f: comando para ficar escutando os logs
      	   Ex.: docker logs -f 327
   
   'docker rm <id>': remove containers parados da sua máquina.
      Flags:
      	-f: força a remoção do container caso esteja executando.
      	
   'docker build <diretorio_dockerfile': gera uma imagem docker a partir de um dockerfile.
      Flags:
      	-t: usado para nomear uma imagem no processo de criação
      	Ex.: docker docker build -t <nome_imagem>:<tag> <dir>
      	
   'docker image ls': usado para listas a imagens locais.   	
   
   'docker pull <imagem>': usado para fazer o download de imagens do hub.
   
   'docker tag <id_imagem> <nome_imagem>': usando para nomear ou renomear uma imagem.
   
   'docker tag <id_imagem> <nome_imagem>:<tag>': criar uma tag/versionar uma imagem.
      	
   'docker rmi <id_img>': usado para remover imagens
      Flags:
         -f: força a remoção da imagem caso esteja seja utilizada por um container

   'docker system prune': remove imagens, containers e networks não utilizados
   
   'docker cp <dir_file> <dir_destino>': usado para copiar um arquivo para ou de um container para ou de um diretório ou outro container. Para buscar o arquivo dentro do container, usar '<nome_container>:<dir_arquivo>'.
         
   'docker top <container': usado para verificar dados de execução de um container.
          
   'docker inspect <container': usado para verificar diversar informações como: id, data de criação, imagem e muito mais...
   
   'docker stats': usado para verificar os processos que estão sendo executados em um container
   
   'docker login': usado para configurar as credenciais de acesso do Docker Hub

   'docker logout': usado para deleter suas credenciais locais do Docker Hub
   
   'docker push <img>': usado para enviar imagens para o Docker Hub
   
   
Criando uma imagem docker:
   Para criar uma imagem é necessário fazer o build dela.
      Usando o comando docker build
   Precisamos de um arquivo Dockerfile;
   Instruções:
      FROM: Imagem base
      WORKDIR: diretório da aplicação
      EXPOSE: porta da aplicação
      COPY: quais arquivos precisam ser copiados
         

Volumes:
   Uma forma rápida de persistir dados em aplicações e não depender de containers para isso
	
   Tipos de volumes:
	Anônimos: Diretórios criados pela flag -v, porém com um nome aleatório
		Para criar um volume anônimo é necessário usar o parâmetro '-v /path'. 
		Ex.: docker run -d -p 80:80 --name container_name --rm -v /data image_name
	Nomeados: São volumes com nomes, podemos nos referir a este volume facilmente e saber para que eles são utilizados no nosso ambiente
		Para criar um volume nomeado é necessário usar o parâmetro '-v volume_name:/path'. 
		Ex.: docker run -d -p 80:80 --name container_name --rm -v volume_name:/data image_name
	
	Bind mounts: Uma forma de salvar dados na nossa máquina, sem o gerenciamento do Docker, informamos um diretório para este fim
		Para criar um volume nomeado é necessário definir o diretório na nossa máquina e o diretório no container, assim: '/nossa_maquina:/path'. 
		Ex.: docker run -d -p 80:80 --name container_name --rm -v /nossa_maquina:/path image_name
		Obs.: O Bind Mount não serve apenas para volumes, também é um técnica para atualização em tempo real do projeto, sem ter que refazer o build a cada atualização.

	Se atentar em criar o o volume no diretório da imagem, configurado no Dockerfile em WORKDIR.
	
	'docker volume create <name>': usado para criar volumes manualmente.
	
	'docker volume ls': usado para listar volumes. Assim temos acesso aos anonumous e os named volumes.
	
	'docker volume inspect <nome>': usado para verificar os detalhes de um volume específico.
	
	'docker volume rm <nome>': Usado para remover um volume existente de forma fácil. Os dados do volume também serão deletados.
	
	'docker volume prune': Usado para remover volumes que não estão sendo utilizados.
	
	':ro': Comando usado para dar apenas permissão de leitura para o volume:
		Ex.: docker run -d -p 80:80 --name container_name --rm -v volume_name:/data:ro image_name
		Obs.: :ro é abreviação de Read Only
	
Networks:
	Uma forma de gerenciar a conexão do Docker com outras plataformas ou até mesmo entre containers.
	
	Tipos de conexão:
		Externa: Conexão com uma API de um servidor remoto
		Com o host: Comunicaçãi com a máquina que está executando o Docker;
		Entre containers: Comunicação que utiliza o driver bridge e permite a comunicação entre dois ou mais containers.
		
	Tipos de rede (Drivers):
		Bridge: O mais comum e default do Docker, utilziado quando os containers precisam se conectar.
		host: Permite a conexão entre um container e a máquina que está hosteando o Docker.
		macvlan: permite a conexão a um container por um MAC Address.
		none: Remove todas as conexões de rede de um container.
		plugins: permite extensões de terceiros para criar outras redes.
	
	Comandos:
		'docker network ls': Usado para listar todas as redes do ambiente.
		
		'docker network create <nome>': Usado para criar uma rede. Nesse modo criará uma rede do tipo bridge.
		   Flags:
		      -d <tipo>: Usado para específicar o tipo de rede. Ex.: docker network create -d macvlan <nome>
 		
 		'docker network rm <nome>': Usado para remover redes de forma simples.
 		
 		'docker network prune': usado para remover todas as redes que não estão sendo usadas.
 		
 		'docker network connect <rede> <id_container>': Usado para conectar um container em uma rede.
 		
 		'docker network disconnect <rede> <id_container>': Usado para desconectar um container em uma rede.
 		
 		'docker network inspect': Usado para inspecionar uma network
 		 		
   
