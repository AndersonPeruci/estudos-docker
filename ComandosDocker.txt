Comandos Docker:
   Flag '--help': Todo comando no docker tem acesso a essa flag. Lista as opções disponíveis para o comando
      Ex.: docker run --help
   
   'docker run <nome_image>': usado para executar uma imagem em um novo container:
      Flags:
         -it: usado para habilitar o terminal de interação, permitindo interagir com o container que está executando a imagem
            Ex.: docker run -it python
	 -d: usado para executar um container em background
	    Ex.: docker run -d -p 80:80 nginx
	 -p: expõe uma porta para acessar o container
	    Ex.: docker run -d nginx
	 --name: Define um noma para um novo container
	    Ex.: docker run --name container_python python
	 --rm: usado para remover o container após finalizar a execução
	    Ex.: docker run --rm <container>
	 
   'docker stop <'container id' ou 'nome'>': Encerra a execução de um container:
      Flags:
         -
         
   'docker ps' ou 'docker container ls': exibe quais containers estão sendo executados no momento:
      Flags:
         -a: usando para exibir containers já executados na máquina
            Ex.: docker ps -a
            
   'docker start <id>': Iniciar um container parado
      Flags:
         -i: usado para habilitar o terminal de interação, permitindo interagir com o container que está executando a imagem
            Ex.: docker start -i <container>
         
   'docker logs <id>': usado para exibir os logs de determinada execução
      Flags:
      	-f: comando para ficar escutando os logs
      	   Ex.: docker logs -f 327
   
   'docker rm <id>': remove containers parados da sua máquina.
      Flags:
      	-f: força a remoção do container caso esteja executando.
      	
   'docker build <diretorio_dockerfile': gera uma imagem docker a partir de um dockerfile.
      Flags:
      	-t: usado para nomear uma imagem no processo de criação
      	Ex.: docker docker build -t <nome_imagem>:<tag> <dir>
      	
   'docker image ls': usado para listas a imagens locais.   	
   
   'docker pull <imagem>': usado para fazer o download de imagens do hub.
   
   'docker tag <id_imagem> <nome_imagem>': usando para nomear ou renomear uma imagem.
   
   'docker tag <id_imagem> <nome_imagem>:<tag>': criar uma tag/versionar uma imagem.
      	
   'docker rmi <id_img>': usado para remover imagens
      Flags:
         -f: força a remoção da imagem caso esteja seja utilizada por um container

   'docker system prune': remove imagens, containers e networks não utilizados
   
   'docker cp <dir_file> <dir_destino>': usado para copiar um arquivo para ou de um container para ou de um diretório ou outro container. Para buscar o arquivo dentro do container, usar '<nome_container>:<dir_arquivo>'.
         
   'docker top <container': usado para verificar dados de execução de um container.
          
   'docker inspect <container': usado para verificar diversar informações como: id, data de criação, imagem e muito mais...
   
   'docker stats': usado para verificar os processos que estão sendo executados em um container
   
   'docker login': usado para configurar as credenciais de acesso do Docker Hub

   'docker logout': usado para deleter suas credenciais locais do Docker Hub
   
   'docker push <img>': usado para enviar imagens para o Docker Hub
   
   
Criando uma imagem docker:
   Para criar uma imagem é necessário fazer o build dela.
      Usando o comando docker build
   Precisamos de um arquivo Dockerfile;
   Instruções:
      FROM: Imagem base
      WORKDIR: diretório da aplicação
      EXPOSE: porta da aplicação
      COPY: quais arquivos precisam ser copiados
         

Volumes:
   Uma forma rápida de persistir dados em aplicações e não depender de containers para isso
	
   Tipos de volumes:
	Anônimos: Diretórios criados pela flag -v, porém com um nome aleatório
		Para criar um volume anônimo é necessário usar o parâmetro '-v /path'. 
		Ex.: docker run -d -p 80:80 --name container_name --rm -v /data image_name
	Nomeados: São volumes com nomes, podemos nos referir a este volume facilmente e saber para que eles são utilizados no nosso ambiente
		Para criar um volume nomeado é necessário usar o parâmetro '-v volume_name:/path'. 
		Ex.: docker run -d -p 80:80 --name container_name --rm -v volume_name:/data image_name
	
	Bind mounts: Uma forma de salvar dados na nossa máquina, sem o gerenciamento do Docker, informamos um diretório para este fim
		Para criar um volume nomeado é necessário definir o diretório na nossa máquina e o diretório no container, assim: '/nossa_maquina:/path'. 
		Ex.: docker run -d -p 80:80 --name container_name --rm -v /nossa_maquina:/path image_name
		Obs.: O Bind Mount não serve apenas para volumes, também é um técnica para atualização em tempo real do projeto, sem ter que refazer o build a cada atualização.

	Se atentar em criar o o volume no diretório da imagem, configurado no Dockerfile em WORKDIR.
	
	'docker volume create <name>': usado para criar volumes manualmente.
	
	'docker volume ls': usado para listar volumes. Assim temos acesso aos anonumous e os named volumes.
	
	'docker volume inspect <nome>': usado para verificar os detalhes de um volume específico.
	
	'docker volume rm <nome>': Usado para remover um volume existente de forma fácil. Os dados do volume também serão deletados.
	
	'docker volume prune': Usado para remover volumes que não estão sendo utilizados.
	
	':ro': Comando usado para dar apenas permissão de leitura para o volume:
		Ex.: docker run -d -p 80:80 --name container_name --rm -v volume_name:/data:ro image_name
		Obs.: :ro é abreviação de Read Only
	
Networks:
	Uma forma de gerenciar a conexão do Docker com outras plataformas ou até mesmo entre containers.
	
	Tipos de conexão:
		Externa: Conexão com uma API de um servidor remoto
		Com o host: Comunicaçãi com a máquina que está executando o Docker;
		Entre containers: Comunicação que utiliza o driver bridge e permite a comunicação entre dois ou mais containers.
		
	Tipos de rede (Drivers):
		Bridge: O mais comum e default do Docker, utilziado quando os containers precisam se conectar.
		host: Permite a conexão entre um container e a máquina que está hosteando o Docker.
		macvlan: permite a conexão a um container por um MAC Address.
		none: Remove todas as conexões de rede de um container.
		plugins: permite extensões de terceiros para criar outras redes.
	
	Comandos:
		'docker network ls': Usado para listar todas as redes do ambiente.
		
		'docker network create <nome>': Usado para criar uma rede. Nesse modo criará uma rede do tipo bridge.
		   Flags:
		      -d <tipo>: Usado para específicar o tipo de rede. Ex.: docker network create -d macvlan <nome>
 		
 		'docker network rm <nome>': Usado para remover redes de forma simples.
 		
 		'docker network prune': usado para remover todas as redes que não estão sendo usadas.
 		
 		'docker network connect <rede> <id_container>': Usado para conectar um container em uma rede.
 		
 		'docker network disconnect <rede> <id_container>': Usado para desconectar um container em uma rede.
 		
 		'docker network inspect': Usado para inspecionar uma network
 		
Docker Compose:
	Docker Compose é uma ferramenta para rodas múltiplos containers.
	
	Para o arquivo, o nome deve ser docker-compose.yaml.
	
	No arquivo, é necessário usar o parâmetro 'version'.
	
	O parâmetro 'service' é usado para configurar os serviços que o compose irá subir.

	O parâmetro 'volume' é usado para definir os volumes que serão usados pelo serviços.
	
	'docker compose up': Usado para executar a estrutura em Compose.
	   Flags:
	      -d: Usado para executar o Compose em modo detached. 
   	         Ex.: docker compose up -d
	'docker compose down': Usado para parar executar a estrutura em Compose rodando em background.
	
	Variáveis de ambiente:
		Para definir variáveis de ambiente, devemos usar um arquivo base para definir as variáveis.
		As variáveis podem ser chamadas pela sintaxe ${VARIVAEL}'
		No arquivo docker-compose, use o parâmetro env_file para adicionar uma lista com o caminho dos arquivos de env var
		
	Network:
		É possível definir networks para os cada serviço contido no docker-compose.
		Para criar uma network, bata usar o parâmetro 'networks' na raiz do arquivo para definir um network.
		Para usar a network criada, usar o parâmetro 'networks' dentro do serviço que deseja configurar a network.
		
	Build de imagem:
		Substituir o params 'image'pelo params 'build' e indicar o caminho da imagem que deseja buildar antes de usar no compose.
		
	Bind Mount:
		Indicar no params 'volume' do serviço o caminho raiz do arquivo que recerá a edição e depois o caminho configurado no WORKDIR da imagem:
		Ex.: 
		   volume:
		      - "/file_path:/workdir_path" 
	'docker compose ps': Usado para verificar um resumo dos serviços que subiram ao executar o compose.
	
	
Orquestração de containers:
	Orquestração é o ato de conseguir gerenciar e escalar os containers da nossa aplicação. Basicamente é um serviço que reage sobre outros serviõs, verificando se os serviços estão funcionando como deveriam.
	Alguns serviços de orquestração: Docker Swarm, Kubernetes e Apache Mesos.
	
	Docker Swarm:
		É uma ferramenta do Docker para orquestrar containers.
		
		Conceitos:
			Nodes: é uma instância que participa do Swarm.
			Manager Node: Node que gerencia os demais Nodes.
			Worker Node: Nodes que trabalham em função do Manager.
			Service: Um conjunto de tasks que o Manager Node manda o Work Node executar.
			Task: Comandos que são executados nos Nodes.
		
		Comandos:
			'docker swarm init':  Usado para iniciar o swarm. Fará com que a máquina vire um Node e também transforma o Node em um Manager. 
				--advertise-addr: usado para indicar o IP address do servidor.

			'docker swarm leave': Usado para encerrar o swarm. 			

			'docker node ls': Suado para verificar quais Nodes estão ativos.
			
			'docker swarm join --token <TOKEN> <IP>:<PORTA>': Usado para adicionar um novo serviço. Essa nova máquina entrará como Worker.
			
			'docker service create --name <nome> <imagem>': Usado para iniciar um serviço com o comando.
				
			'docker service ls': usado para listar os serviços que estão rodando. Só pode usar esse comando no Manager, máquinas gerenciadoras.
			
			'docker service rm <nome>': Usado para remover um serviço. Comando do Manager.
			'docker service create --name <nome> --replicas <numero> <imagem>': Usado para criar um serviço com um número maior de réplicas. Desta forma, uma task será emitida, replicando este serviço nos Workers.
			
			'docker swarm join-token manager': Usado para checar o token do Swarm, caso precise. 
			
			'docker info': Usado para verificar detalhes do Swarm que o Docker está utilizando.
			
			'docker node rm <id>': Usado para remover um node no sistema Swarm.
			   Tags:
			      -f: Usado para forçar a remoção caso esteja executando algum serviço
			         Ex.: docker node rm <id> -f
			         
			'docker service inspect <id>': Usado para ver mais detalhes do serviço. Deve ser rodado no Manager.
			
			'docker service ps': Usado para ver quais containers estão rodando. Verá todos os containers da execução Swarm
			   Tags:
			      -a: Usado para ver containers que não estão em execução
			         Ex.: docker service inspect <id> -a
			
			'docker stack deploy -c <docker-compose.yaml'> <nome>': Usado para rodar Compose com Swarm.
			
			'docker service scale <nome>=<replicas>': Usado para criar novas réplicas nos Workers Nodes.
			
			'docker node update --availability <disponibilidade> <id>': Usado para atualizar a disponibilidade de um serviço.
			   Ex. disponibilidade: 
			      - drain: Faz com que o serviço não receba mais 'ordens' do Manager
			      - active: Faz com que o serviço receba mais 'ordens' do Manager
			
			'docker service update': Usado para atualizar configuração dos nodes com base nas flags usadas.
			   Tags:
			      --image: Usado para atualizar a imagem do serviço
			         Ex.: docker service update --image <imagem> <servico>
			      
			      --network: Usado para atualizar a network usada
		      	         Ex.: docker service update --network <network> <servico>
			
		Criando network para Swarm
			Para o Swarm devemos criar uma network com o driver 'overlay'
			   Ex.: 'docker network create --driver overlay swarmnetwork'
		        
		        Para criar um serviço e atribuir a nova network, deverá usar a flag --network <network>
		           Ex.: docker service create --name <nome> --repicas <numero> --network <netowork> <imagem>'
			          
	Kubernetes:
		É uma ferramenta de orquestração de containers.
		Permite a criação de múltiplos containers em diferentes máquinas.
		As imagens usadas pelo kubernetes precisam estar no hub do Docker
		
		Conceitos fundamentais:
			Control Pane: Onde é gerenciado o controle dos processos dos Nodes.
			Nodes: Máquinas que são gerenciadas pelo Control Plane.
			Deployment: A execução de uma imagem/projeto em um Pod.
			Pod: Um ou mais containers que estão em um Node.
			Services: Serviços que expõe os Pods ao mundo externo.
			kubectl: Cliente de linha de comando para Kubernetes.
			
		Minikube: 
			Usado para configurar um cluster Kubernetes.
			
			'minikube start' ou 'minikube start --driver=<driver>': Usado para inicializar o Minikube. O driver vai depender de como foi sua instalação das dependências.
			
			'minikube stop': Usado para parar a execução do minikube.
			 
			'minikube dashboard': Usado para visualizar a dashboard para ver detalhamentos do projeto, como serviços, pods e etc.
			   Flags:
			      --url: Usado para encontrar a URL da dashboard. 
		   	         Ex.: minikube dashboard --url
			
			 
 		
			 
			 
			 
			 
			 
